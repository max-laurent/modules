nextflow_process {

    name "Test Process CELLRANGERATAC_COUNT"

    script "../main.nf"
    config "./nextflow.config"
    process "CELLRANGERATAC_COUNT"

    tag "modules"
    tag "modules_nfcore"
    tag "cellrangeratac"
    tag "cellrangeratac/mkref"
    tag "cellrangeratac/count"
    tag "unzip"

    setup {
        run("UNZIP") {
            script "../../../unzip/main.nf"

            process {
                """
                input[0] = [[],file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr1/genome.fasta.gz', checkIfExists:true)]
                """
            }
        }

        run("CELLRANGERATAC_MKREF") {
            script "../../mkref/main.nf"

            process {
                """
                input[0] = UNZIP.out.unzipped_archive.map{it -> it[1]} + "/genome.fasta"
                input[1] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr1/genome.gtf', checkIfExists:true)
                input[2] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome_motifs.txt', checkIfExists:true)
                input[3] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome_config.json', checkIfExists:true)
                input[4] = "cellrangeratac_reference"
                """
            }
        }
    }

    test("test_cellrangeratac_count") {

        when {
            params {
                module_args = ''
            }
            process {
                """
                input[0] = [[id:'test', single_end:false, samples:["test_scATAC"]], // meta map
                    [file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger-atac/test_scATAC_S1_L001_I1_001.fastq.gz', checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger-atac/test_scATAC_S1_L001_R1_001.fastq.gz', checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger-atac/test_scATAC_S1_L001_R3_001.fastq.gz', checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger-atac/test_scATAC_S1_L001_R2_001.fastq.gz', checkIfExists:true)
                    ]
                    ]
                input[1] = CELLRANGERATAC_MKREF.out.reference
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.config,
                    process.out.versions,
                    path( "${outputDir}/cellrangeratac/test/outs/filtered_peak_bc_matrix.h5"                        ),
                    path( "${outputDir}/cellrangeratac/test/outs/filtered_peak_bc_matrix/barcodes.tsv"              ),
                    path( "${outputDir}/cellrangeratac/test/outs/filtered_peak_bc_matrix/peaks.bed"                 ),
                    path( "${outputDir}/cellrangeratac/test/outs/filtered_peak_bc_matrix/matrix.mtx"                ),
                    path( "${outputDir}/cellrangeratac/test/outs/filtered_tf_bc_matrix.h5"                          ),
                    path( "${outputDir}/cellrangeratac/test/outs/filtered_tf_bc_matrix/barcodes.tsv.gz"             ),
                    path( "${outputDir}/cellrangeratac/test/outs/filtered_tf_bc_matrix/motifs.tsv"                  ),
                    path( "${outputDir}/cellrangeratac/test/outs/filtered_tf_bc_matrix/matrix.mtx.gz"               ),
                    path( "${outputDir}/cellrangeratac/test/outs/raw_peak_bc_matrix.h5"                             ),
                    path( "${outputDir}/cellrangeratac/test/outs/raw_peak_bc_matrix/barcodes.tsv"                   ),
                    path( "${outputDir}/cellrangeratac/test/outs/raw_peak_bc_matrix/peaks.bed"                      ),
                    path( "${outputDir}/cellrangeratac/test/outs/raw_peak_bc_matrix/matrix.mtx"                     ),
                    path( "${outputDir}/cellrangeratac/test/outs/summary.csv"                                       ),
                    path( "${outputDir}/cellrangeratac/test/outs/summary.json"                                      ),
                    path( "${outputDir}/cellrangeratac/test/outs/peak_motif_mapping.bed"                            ),
                    path( "${outputDir}/cellrangeratac/test/outs/peak_annotation.tsv"                               ),
                    path( "${outputDir}/cellrangeratac/test/outs/cut_sites.bigwig"                                  ),
                    path( "${outputDir}/cellrangeratac/test/outs/singlecell.csv"                                    )
                ).match() }
            )
        }
    }


    test("test_cellrangeratac_count -- stub") {
        options '-stub'
        when {
            params {
                module_args = ''
            }
            process {
                """
                input[0] = [[id:'test',single_end:false,samples:["test_scATAC"]],// meta map
                    [file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger-atac/test_scATAC_S1_L001_R1_001.fastq.gz', checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger-atac/test_scATAC_S1_L001_R3_001.fastq.gz', checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/10xgenomics/cellranger-atac/test_scATAC_S1_L001_R2_001.fastq.gz', checkIfExists:true)
                    ]
                    ]
                input[1] = CELLRANGERATAC_MKREF.out.reference
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out,
                    process.out.versions.collect{ path(it).yaml }
                    ).match() }
            )
        }
    }
}
